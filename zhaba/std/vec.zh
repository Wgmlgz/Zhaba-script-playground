use 'range.zh'
use 'operators.zh'

type Vec T
  int size
  int capacity
  TP head

impl Vec
  fn free_mem
    ? slf.head as int: free(slf.head as int)
    slf.size = 0
    slf.capacity = 0
    slf.head = 0 as TP

  fn TP atP int pos
    T item
    int item_size
    item_size = sizeof(item)
    <<< (((slf.head) as int) + pos * item_size) as TP

  fn T at int pos: <<< *slf.atP(pos)
    
  fn double_capacity
    auto new_capacity = slf.capacity
    T item
    ? new_capacity == 0
      new_capacity = 1
      slf.head = malloc(sizeof(item) + 10000) as TP
    \ new_capacity *= 2
      new_head := malloc(new_capacity * sizeof(item)) as TP
      @ i 0..slf.size: *(new_head + i) = slf.at(i)
      free(slf.head as int)
      slf.head = new_head
    slf.capacity = new_capacity

  fn push_back T val
    ? slf.size == slf.capacity: slf.double_capacity()
    *slf.atP(slf.size) = val
    ++slf.size
  fn pop_back: --slf.size
  
  fn TP begin: <<< slf.head
  fn TP end: <<< slf.atP(slf.size)
  fn T front: <<< *slf.head
  fn T back: <<< *slf.atP(slf.size-1)
  fn TP frontP: <<< slf.head
  fn TP backP: <<< slf.atP(slf.size-1)

  fn dtor: slf.free_mem()
  fn ctor int size
    slf.head = 0 as TP
    slf.size = 0
    slf.capacity = 0
    @ slf.capacity < size: slf.double_capacity()
    slf.size = size
  
  fn ctor: slf.ctor(0)

  // fn VecInt newVecInt int size
  //   VecInt slf
    

  // fn VecInt newVecInt
  //   <<< newVecInt(0)

  fn print
    int i = 0
    put('[')
    @ i 0..slf.size
     ? i: put(' ')
     put(slf.at(i))
    out(']')

  // lop deb VecIntP vec
  //   put('size: ')
  //   out(vec.size)

  //   put('capacity: ')
  //   out(vec.capacity)

  //   put('head: ')
  //   out(vec.head as u64)

  //   put('content: ')
  //   out(vec)

impl Vec
  fn swap TP a TP b
    T t = *a
    *a = *b
    *b = t

  fn int get_item_size
    T item
    int item_size
    <<< sizeof(item)

  fn next_ptr TPP ptr: *ptr = (*ptr as int + slf.get_item_size()) as TP
  fn prev_ptr TPP ptr: *ptr = (*ptr as int - slf.get_item_size()) as TP
  
  fn int ptr_uneq TP a TP b
    <<< a as int != b as int

  fn TP partition TP low TP high
    slf.prev_ptr(&high)
    TP pivot = high i = low j = low
    TP i = low

    @ (j = low) (slf.ptr_uneq(j pivot)) (slf.next_ptr(&j))
      ? *j < *pivot
        slf.swap(i j)
        slf.next_ptr(&i)

    slf.swap(i  pivot)
    <<< i

  fn qsort TP lhs TP rhs
    a := rhs as int - lhs as int
    b := slf.get_item_size()
    ? a > b
      auto pi = slf.partition(lhs rhs)
      slf.qsort(lhs pi)
      slf.next_ptr(&pi)
      slf.qsort(pi rhs)
  
  fn sort
    slf.qsort(slf.begin() slf.end())